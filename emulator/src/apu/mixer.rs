#[rustfmt::skip]
const PULSE_LOOKUP_TABLE: [f32; 32] = [
    0.0, 0.01160914, 0.02293948, 0.034000948, 0.044803, 0.05535466, 0.06566453, 0.07574082, 
    0.0855914, 0.09522375, 0.10464505, 0.11386216, 0.12288164, 0.1317098, 0.14035265, 0.14881596,
    0.15710527, 0.16522588, 0.17318292, 0.18098125, 0.18862559, 0.19612046, 0.20347019, 0.21067894,
    0.21775076, 0.2246895, 0.23149888, 0.23818249, 0.24474378, 0.25118607, 0.25751257, 0.26372638,
];
#[rustfmt::skip]
const TND_LOOKUP_TABLE: [f32; 204] = [
    0.0, 0.006699824, 0.01334502, 0.019936254, 0.02647418, 0.032959443, 0.039392676, 0.0457745,
    0.052105535, 0.05838638, 0.064617634, 0.07079987, 0.07693368, 0.08301963, 0.08905826,
    0.095050134, 0.100995794, 0.10689577, 0.11275058, 0.118560754, 0.12432679, 0.13004918,
    0.13572845, 0.14136505, 0.14695948, 0.15251221, 0.15802369, 0.1634944, 0.16892476,
    0.17431526, 0.1796663, 0.1849783, 0.19025174, 0.195487, 0.20068449, 0.20584463,
    0.21096781, 0.21605444, 0.2211049, 0.2261196, 0.23109888, 0.23604313, 0.24095272,
    0.245828, 0.25066936, 0.25547713, 0.26025164, 0.26499328, 0.26970235, 0.27437922,
    0.27902418, 0.28363755, 0.28821972, 0.29277092, 0.29729155, 0.30178183, 0.3062421,
    0.31067267, 0.31507385, 0.3194459, 0.32378912, 0.32810378, 0.3323902, 0.3366486,
    0.3408793, 0.34508255, 0.34925863, 0.35340777, 0.35753027, 0.3616264, 0.3656963,
    0.36974037, 0.37375876, 0.37775174, 0.38171956, 0.38566244, 0.38958064, 0.39347434,
    0.39734384, 0.4011893, 0.40501097, 0.4088091, 0.41258386, 0.41633546, 0.42006415,
    0.42377013, 0.4274536, 0.4311148, 0.43475384, 0.438371, 0.44196644, 0.4455404,
    0.449093, 0.45262453, 0.45613506, 0.4596249, 0.46309412, 0.46654296, 0.46997157,
    0.47338018, 0.4767689, 0.48013797, 0.48348752, 0.4868177, 0.49012873, 0.49342072,
    0.49669388, 0.49994832, 0.50318426, 0.50640184, 0.5096012, 0.51278245, 0.51594585,
    0.5190915, 0.5222195, 0.52533007, 0.52842325, 0.5314993, 0.5345584, 0.5376005,
    0.54062593, 0.5436347, 0.54662704, 0.54960304, 0.55256283, 0.5555065, 0.5584343,
    0.56134623, 0.5642425, 0.56712323, 0.5699885, 0.5728384, 0.5756732, 0.57849294,
    0.5812977, 0.5840876, 0.5868628, 0.58962345, 0.5923696, 0.59510136, 0.5978189,
    0.6005223, 0.6032116, 0.60588706, 0.60854864, 0.6111965, 0.6138308, 0.6164516,
    0.619059, 0.62165314, 0.624234, 0.62680185, 0.6293567, 0.6318986, 0.6344277,
    0.6369442, 0.63944805, 0.64193934, 0.64441824, 0.64688486, 0.6493392, 0.6517814,
    0.6542116, 0.65662974, 0.65903604, 0.6614306, 0.6638134, 0.66618466, 0.66854435,
    0.6708926, 0.67322946, 0.67555505, 0.67786944, 0.68017274, 0.68246496, 0.6847462,
    0.6870166, 0.6892762, 0.6915251, 0.6937633, 0.6959909, 0.6982081, 0.7004148,
    0.70261115, 0.7047972, 0.7069731, 0.7091388, 0.7112945, 0.7134401, 0.7155759,
    0.7177018, 0.7198179, 0.72192425, 0.72402096, 0.7261081, 0.72818565, 0.7302538,
    0.73231256, 0.734362, 0.73640215, 0.73843306, 0.7404549, 0.7424676, 0.7444713,
];

pub(super) fn mixer_value(
    pulse_1_output: u8,
    pulse_2_output: u8,
    triangle_output: u8,
    noise_output: u8,
    dmc_output: u8,
) -> f32 {
    debug_assert!(pulse_1_output <= 15 && pulse_2_output <= 15);
    debug_assert!(triangle_output <= 15);
    debug_assert!(noise_output <= 15);
    debug_assert!(dmc_output <= 127);

    let pulse_out = PULSE_LOOKUP_TABLE[pulse_1_output as usize + pulse_2_output as usize];
    let tnd_output = TND_LOOKUP_TABLE[3 * triangle_output as usize + 2 * noise_output as usize + dmc_output as usize];

    pulse_out + tnd_output
}
